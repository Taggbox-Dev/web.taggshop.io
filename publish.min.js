var ApplicationEmbed = ApplicationEmbed || function(t, e) {
    function i(t) {
      for (var e = "", i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", a = i.length, n = 0; n < t; n++)
        e += i.charAt(Math.floor(Math.random() * a));
      return e
    }
    return {
      init: function() {
        for (let t = document.getElementsByClassName("tagshop-socialwall"), e = 0; e < t.length; e++)
          if (null == t[e].getAttribute("data-is-load") || "0" == t[e].getAttribute("data-is-load") || null == t[e].getAttribute("data-is-load")) {
            const a = "https://web.taggshop.io/embed.json",
              n = `root_${i(5)}`;
            t[e].setAttribute("data-render-id", n), t[e].setAttribute("data-is-load", 0), t[e].setAttribute("id", `co_${n}`);
  
            // Create a new MutationObserver
            const observer = new MutationObserver((mutationsList, observer) => {
              for (const mutation of mutationsList) {
                if (mutation.type === 'childList' && mutation.addedNodes.length && mutation.addedNodes[0].id === `co_${n}`) {
                  // Parent element has been added, append child element
                  const parentElement = mutation.addedNodes[0];
                  const childElement = document.createElement("div");
                  childElement.setAttribute("id", n);
                  parentElement.appendChild(childElement);
  
                  // Load CSS and script
                  fetch(a).then((t => t.json())).then((t => {
                    const {
                      css: e,
                      id: i,
                      script: a
                    } = t;
  
                    let o = document.createElement("link");
                    o.setAttribute("type", "text/css");
                    o.setAttribute("rel", "stylesheet");
                    o.setAttribute("onload", "this.media='all'");
                    o.setAttribute("href", e);
                    document.head.appendChild(o);
  
                    let r = document.createElement("script");
                    r.setAttribute("src", a);
                    r.defer = true;
                    document.body.appendChild(r);
                  }));
  
                  // Disconnect the observer
                  observer.disconnect();
                }
              }
            });
  
            // Start observing the parent element
            observer.observe(document.body, { childList: true, subtree: true });
          }
      }
    }
  }(window);
  ApplicationEmbed.init();