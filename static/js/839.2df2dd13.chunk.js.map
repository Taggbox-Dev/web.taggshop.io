{"version":3,"file":"static/js/839.2df2dd13.chunk.js","mappings":"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","sources":["app/components/website/themes/themePreview/src/app/Themes/SquarePhoto/elements/Image.js","app/components/website/themes/themePreview/src/app/Themes/SquarePhoto/elements/Media.js","app/components/website/themes/themePreview/src/app/Themes/SquarePhoto/elements/CardHover.js","app/components/website/themes/themePreview/src/app/Themes/SquarePhoto/elements/Card.js","app/components/website/themes/themePreview/src/app/Themes/SquarePhoto/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport reactImageSize from 'react-image-size';\r\nimport HotSpot from \"../../Elements/HotSpot\";\r\nimport { IMG_LOAD_AFTER_COMPLETE_LAYOUT, IS_SCREEN_SHOT, marginTop_mainDiv } from '../../../../utils'\r\nexport default class Image extends PureComponent {\r\n\r\n  componentDidMount() {\r\n    marginTop_mainDiv();\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n    const { ImageClass, ImageUrl, item, ugc_products, wall,height,width } = this.props\r\n    const ImageBg = { backgroundImage: `url(${ImageUrl})` };\r\n    const styleImg = { height: item.hotspot ? (width > height) ? `auto` : `100%`:(width > height) ? '100%':`auto`, width: item.hotspot ? (width > height) ? `100%`: `auto`:(width > height) ? 'auto':`100%`}\r\n\r\n \r\n    return <>\r\n            <div className=\"ts_sp_image_blur_bg\" style={ImageBg}><div></div></div>\r\n            <div className={ImageClass} id=\"suresh\" style={styleImg}> \r\n            <img loading=\"lazy\"  data-src={ImageUrl}  src={ImageUrl}  data-is-optmized=\"0\" style={styleImg} data-link={item.link} data-load=\"0\" data-wall-id={wall.Wall.id} data-item-id={item.id} onLoad={this.onLoadImage} data-filter-id={item.filterId} data-stories={item.stories} data-network={item.networkId} height={height} width={width} className={`imgID${item.id}`} onError={(e) => { if(item.networkId !== `28`) IMG_LOAD_AFTER_COMPLETE_LAYOUT(e) }} alt=\"image\" />\r\n            {item.hotspot ? <HotSpot ugc_products={ugc_products} UgcSetting={item.ugc_personalizaion.UgcSetting} item={item} /> : null}\r\n          </div>\r\n          \r\n      </>\r\n    ;\r\n  }\r\n}","import React, { PureComponent } from \"react\";\r\nimport reactImageSize from 'react-image-size';\r\nimport Image from \"./Image\";\r\nimport {convertObjectToArray, ShopableText} from '../../../../utils' \r\nexport default class SquarePhotoMedia extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.state = {\r\n      height: '100',\r\n      width: '100',\r\n    \r\n    };\r\n  }\r\n  componentWillMount() {\r\n    const { item } = this.props;\r\n    if(item.mediaHeight && item.mediaWidth !=\"\"){\r\n      this.setState({\r\n        height : (item.mediaHeight * 100) / item.mediaWidth,\r\n         width : (item.mediaWidth * 100) / item.mediaHeight,\r\n      })\r\n      \r\n    }\r\n      else{\r\n         \r\n        reactImageSize(item.postFileNew).then(({ width, height }) => this.setState({\r\n          height: (height * 100) / width,\r\n          width: (width * 100) / height\r\n        })).catch((errorMessage) =>\r\n        this.setState({\r\n          height: 100,\r\n          width: 100,\r\n          error: errorMessage\r\n        }))\r\n      // alert('ok')\r\n      }\r\n      }\r\n\r\n  render() {    \r\n    const { item , wall} = this.props;\r\n    const { height , width} = this.state;\r\n\r\n    const ugc_products = convertObjectToArray(item.ugc_products);\r\n\r\n    return (\r\n      <div className=\"tb_sp_media_wrap\">\r\n           {wall.User.id === 31665 ? <ShopableText ugc_products={item.ugc_products}  />:''}\r\n         \r\n          {width ?<Image  ImageClass={'tb_sp_image'} height={height} width={width} ImageUrl={item.postFileNew} ugc_products={ugc_products} item={item} wall={wall} />:''}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { PureComponent } from \"react\";\r\nimport CtaButton from \"../../Elements/CtaButton\";\r\nimport { RATINGS_PATH } from '../../../../constants'\r\nimport { TWITTER_LOGO } from \"../../../../../../../../../../actions/api\";\r\nimport { TWITTER_LOGO_FN } from \"../../../../utils\";\r\n\r\nexport default class CardHover extends PureComponent {\r\n  render() {   \r\n    const {item, wall, network, cardWidth} = this.props;\r\n    const isShopIcon = (item.ugc_products && item.ugc_products.length > 0 && item.hotspot === 0) ? true : false; \r\n    const networkColor = wall.ThemeRule.iconType == 505 ? network.color : wall.ThemeRule.iconColor;\r\n    const styleCta ={fontFamily:wall.ThemeRule.css_font}; const networkIcon = network.icon.replace('fa-', '');\r\n    const socialIconCss = cardWidth <= 700 && cardWidth > 500 ? {fontSize: '26px'} : cardWidth <= 500 && cardWidth > 200? {fontSize: '22px'} : cardWidth <= 200 ? {fontSize: '18px'} : {}\r\n    return (\r\n      <div className=\"ts_sp_Post_hover\">\r\n        <div className=\"ts_sp_card_hover_in\">\r\n          <div className=\"ts_sp_card_hover_overlay\" style={{ backgroundColor: 'rgba(0, 0, 0, 0.6)'}}><div></div></div>\r\n          <div className=\"ts_sp_card_hover_content\">\r\n            <div className=\"ts_sp_slider-social-icon\" style={{ color: 'rgb(0, 0, 0)'}}>\r\n            {(item.rating != null && item.rating != 0) ? <div className=\"ts_sp_social_rating\" style={{backgroundImage: `url(${RATINGS_PATH}${item.networkId}/${item.rating}.png)`}} ><div></div></div>\r\n             : <div className={`tb__icon tb-${networkIcon}`} style={{ color: networkColor, ...socialIconCss }}><div></div></div>\r\n            }\r\n            </div>\r\n            <div className=\"ts_sp_card_shop_btn\">\r\n            {isShopIcon && <CtaButton shoppingText={wall.ThemeRule.shoppingText} ctaClass={'ts_sp_shop_btn'} styleCta={styleCta}/>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { PureComponent } from \"react\";\r\nimport SquarePhotoMedia from \"./Media\";\r\nimport CardHover from \"./CardHover\";\r\nimport CardIcons from \"../../Elements/CardIcons\";\r\nimport { connect } from 'react-redux';\r\nimport { findNetworkDataFromWebFilters , findFromArray, removeTransFromCss, isPostAvailable} from '../../../../utils'\r\nimport { themePostTracking, showPopUP } from '../../../../../../../../../../actions/themeActions/themeActions'\r\n\r\nclass Card extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef_square = React.createRef();\r\n    this.state = {cardWidth : null}\r\n  }\r\n  componentDidMount(){ \r\n    if(isPostAvailable(this.props.itemData.id)){\r\n      this.onLoadPopup();\r\n      setTimeout(()=>{\r\n        const element = document.querySelector(`.ts_p_${this.props.itemData.id}`);\r\n        if(element){element.scrollIntoView(true);}\r\n      if(this.myRef_square && this.myRef_square.current) this.setState({cardWidth: this.myRef_square.current.clientWidth})\r\n    },500)\r\n    }\r\n  }\r\n  componentDidUpdate(){\r\n    setTimeout(() => { \r\n      if(this.myRef_square && this.myRef_square.current) this.setState({cardWidth: this.myRef_square.current.clientWidth})\r\n    }, 1000);\r\n  }\r\n\r\n  onLoadPopup = event => {\r\n    const { itemData, wall, postData, itemIndex, languageSetting, completeDataObject, wallId, webFilters } = this.props;\r\n    let updatePostData = postData.map(itemData => completeDataObject[itemData])\r\n    let filteredPostData = updatePostData.filter((filterData) => !String(filterData.id).includes(\"free_add_\")) \r\n    let currentIndex = findFromArray(filteredPostData, itemData.id, itemIndex)\r\n\r\n    if (wall.Personalization.postFeatured === 1) {\r\n      removeTransFromCss(`add`);\r\n      this.props.showPopUP({ type: 'post', card: itemData, idArray: filteredPostData, index: currentIndex, viewOnText: languageSetting.viewOnText, shareText: languageSetting.shareText, personalization: wall.Personalization, ThemeRule: wall.ThemeRule, webFilters: webFilters, UserRule: wall.UserRule, wall: wall })\r\n    } themePostTracking({ action: 2, wall: wallId, feed: itemData.feedId, post: itemData.referenceId })\r\n  }\r\n\r\n  render() {\r\n    const { itemData, wall, webFilters, adjustWidth } = this.props;\r\n    const highlight = itemData.highlight; const shareOption = wall.ThemeRule.shareOption; const hideContent = wall.ThemeRule.hideContent;\r\n    const networkData =    findNetworkDataFromWebFilters(itemData.network, webFilters)\r\n    const ts_sp_post_in = { backgroundColor: wall.ThemeRule.cardColor };\r\n    const postWidth = { width: highlight == 1 ? (adjustWidth * 2) : adjustWidth, height: highlight == 1 ? (adjustWidth * 2) : adjustWidth, padding: wall.Personalization.padding / 2 }\r\n    const isShopIcon = (itemData.ugc_products && itemData.ugc_products.length > 0 && itemData.hotspot === 0) ? true : false;  \r\n    const isVideo = (itemData.type===3 || itemData.type === 5) ? true : false;  \r\n    const multiImages = (itemData.imageList && itemData.imageList.length > 0) ? true : false\r\n    return (\r\n      <div className={`ts_sp_post_wrapper ${itemData && itemData.id ? \"ts_p_\"+itemData.id:\"\" }`} ref={this.myRef_square} style={postWidth}>\r\n        <div className=\"ts_sp_post_in\" onClick={itemData.isPost ? null : this.onLoadPopup}  style={ts_sp_post_in}>\r\n          <div className=\"ts_sp_post_media_wrapp\" >\r\n              {isShopIcon || isVideo || multiImages ? <CardIcons item={itemData} cardWidth={this.state.cardWidth} wall={wall}/> :''}\r\n              <SquarePhotoMedia item={itemData} wall={wall}/>\r\n              <div className=\"ts_sp_post_details\">\r\n              {itemData.hotspot ?null: <CardHover cardWidth={this.state.cardWidth} item={itemData} wall={wall} network={networkData} />}\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => { return { showPopUP: (data) => dispatch(showPopUP(data)), } }; \r\nconst mapStateToProps = state => { return { wallId: state.appData.wallID, } }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\r\n","import React, { PureComponent, Suspense } from \"react\";\r\nimport Card from \"./elements/Card\";\r\nimport Masonry from 'react-masonry-component';\r\nimport { connect } from 'react-redux';\r\nimport { getDataNextSteps } from '../../../../../../../../../actions/themeActions/themeActions'\r\nimport { IS_SCREEN_SHOT} from '../../../utils'\r\nconst imagesLoadedOptions = { background: true }\r\n\r\nclass SquarePhoto extends PureComponent {\r\n\r\n\r\n  requestData = () => {\r\n    const { wall, postData, appendData, hasMoreData, loaderData } = this.props;\r\n    const postCount = wall.Personalization.numberOfPosts;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n    if (hasMoreData && !loaderData.isShowMoreLoading) this.props.getDataNextSteps(wall.Wall.id, timeStamp, postCount, appendData.networkID, appendData.after, appendData.heightEvent);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { wall, postData, appendData, hasMoreData, loaderData } = this.props;\r\n\r\n    let fixedHeightScrollBar = document.getElementById(\"scrlBarComanW\")\r\n\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      window.dispatchEvent(new Event('resize'));\r\n  })\r\n  resizeObserver.observe(document.querySelector('.taggshopContainer'));\r\n\r\n    if (appendData && wall.Personalization.autoScrollStatus) {\r\n      window.addEventListener('scroll', (event) => {\r\n        let fixedHeightScrollBar = document.getElementById(\"scrlBarComanW\")\r\n        let documentHeight = document.body.scrollHeight;\r\n        var getBottom = window.innerHeight + window.scrollY;\r\n        if (fixedHeightScrollBar.scrollHeight - 10 < getBottom) {\r\n          this.requestData()\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const { newPostData, completeDataObject, adjustWidth, wall, webFilters, languageSetting } = this.props;\r\n\r\n\r\n    return (\r\n      <div className=\"ts_sp_post_container\" id=\"ts_theme_container\">\r\n        <Masonry\r\n          className={`ts_sp_post_container theme${wall.Personalization.commerceTheme}`}\r\n          elementType={'div'}\r\n          options={{\r\n            transitionDuration: 0,\r\n            percentPosition: true,\r\n            itemSelector: '.ts_sp_post_wrapper',\r\n            fitWidth: true,\r\n            columnWidth: 0,\r\n          }}\r\n\r\n          disableImagesLoaded={false}\r\n          updateOnEachImageLoad={false}\r\n          imagesLoadedOptions={{}}\r\n          style={{ width: '100%!important' }}\r\n          enableResizableChildren={true}  >\r\n          {\r\n            (newPostData && newPostData.length > 0) ? newPostData.map((item, index) => {\r\n\r\n            //   if (IS_SCREEN_SHOT && newPostData && ((newPostData.length - 1) == index)) {\r\n            //     setTimeout(() => {\r\n            //         let dataUpdateImage = document.querySelectorAll(\"img[data-is-optmized='0']\");\r\n            //         if (dataUpdateImage && dataUpdateImage.length > 0) {\r\n            //             dataUpdateImage.forEach((item) => {\r\n            //                 item.setAttribute(\"src\", item.getAttribute(\"data-src\"))\r\n            //                 item.setAttribute(\"data-is-optmized\", \"1\")\r\n            //             })\r\n            //         }\r\n            //     }, 1300)\r\n            // }\r\n              const cardData = completeDataObject[item];\r\n              return <Card itemData={cardData} key={`post_id_${index}`} itemIndex={index} adjustWidth={adjustWidth} {...this.props} />\r\n            }) : null\r\n          }\r\n\r\n        </Masonry>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  const { appData } = state;\r\n  return {\r\n    appData: appData,\r\n    loaderData: state.loaderData,\r\n    newPostData: appData.newPostData,\r\n    postData: appData.postData.postData,\r\n    appendData: appData.postData.appendData,\r\n    hasMoreData: appData.postData.hasMoreData[0] ? appData.postData.hasMoreData[0].hasMoreData == false ? false : appData.postData.hasMoreData[appData.postData.appendData.networkID] ? appData.postData.hasMoreData[appData.postData.appendData.networkID].hasMoreData : true : true\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getDataNextSteps: (wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow) => dispatch(getDataNextSteps(wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow)),\r\n\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SquarePhoto);\r\n\r\n"],"names":["Image","marginTop_mainDiv","this","props","ImageClass","ImageUrl","item","ugc_products","wall","height","width","ImageBg","backgroundImage","styleImg","hotspot","className","style","id","loading","src","link","Wall","onLoad","onLoadImage","filterId","stories","networkId","onError","e","IMG_LOAD_AFTER_COMPLETE_LAYOUT","alt","HotSpot","UgcSetting","ugc_personalizaion","PureComponent","SquarePhotoMedia","myRef","React","state","mediaHeight","mediaWidth","setState","reactImageSize","postFileNew","then","catch","errorMessage","error","convertObjectToArray","User","CardHover","network","cardWidth","isShopIcon","length","networkColor","ThemeRule","iconType","color","iconColor","styleCta","fontFamily","css_font","networkIcon","icon","replace","socialIconCss","fontSize","backgroundColor","rating","RATINGS_PATH","CtaButton","shoppingText","ctaClass","Card","onLoadPopup","event","itemData","postData","itemIndex","languageSetting","completeDataObject","wallId","webFilters","updatePostData","map","filteredPostData","filter","filterData","String","includes","currentIndex","findFromArray","Personalization","postFeatured","removeTransFromCss","showPopUP","type","card","idArray","index","viewOnText","shareText","personalization","UserRule","themePostTracking","action","feed","feedId","post","referenceId","myRef_square","isPostAvailable","setTimeout","element","document","querySelector","scrollIntoView","current","clientWidth","adjustWidth","highlight","networkData","shareOption","hideContent","findNetworkDataFromWebFilters","ts_sp_post_in","cardColor","postWidth","padding","isVideo","multiImages","imageList","ref","onClick","isPost","CardIcons","connect","appData","wallID","dispatch","data","SquarePhoto","requestData","appendData","hasMoreData","loaderData","postCount","numberOfPosts","timeStamp","Math","floor","Date","now","isShowMoreLoading","getDataNextSteps","networkID","after","heightEvent","getElementById","ResizeObserver","entries","window","dispatchEvent","Event","observe","autoScrollStatus","addEventListener","fixedHeightScrollBar","getBottom","body","scrollHeight","innerHeight","scrollY","newPostData","commerceTheme","elementType","options","transitionDuration","percentPosition","itemSelector","fitWidth","columnWidth","disableImagesLoaded","updateOnEachImageLoad","imagesLoadedOptions","enableResizableChildren","cardData","updateInStateNow"],"sourceRoot":""}